const userData = localStorage.getItem('user');
const user = JSON.parse(userData);
const main = document.getElementById('main-element');

if (user.role === 'guest') {
  location.replace('../login/login.html');
}

if (user.role !== 'teacher') {
  document.getElementById('stats').classList.add('hidden');
  document.getElementById('download').classList.add('hidden');
}

document
  .getElementById('download-form')
  .addEventListener('submit', async event => {
    event.preventDefault();
    const data = {
      role: user.role,
    };

    fetch('../../backend/endpoints/download_invitations.php', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: JSON.stringify(data),
    }).then(t => {
      return t.blob().then(b => {
        var a = document.createElement('a');
        a.href = URL.createObjectURL(b);
        a.setAttribute('download', 'invitations.csv');
        a.click();
      });
    });
  });

getInvitations().then(response => {
  if (response.success) {
    const invitations = JSON.parse(response.data);
    addInvitationsToPage(invitations);
  }
});

function addInvitationsToPage(invitations) {
  const headerElement = document.getElementsByClassName('header')[0];
  headerElement.innerHTML = '';
  [...document.getElementsByClassName('invitation-element')].forEach(
    element => {
      if (!element.classList.contains('header')) {
        element.remove();
      }
    }
  );
  document.getElementById('invitations')?.remove();
  let headers;

  if (user.role === 'student') {
    headerElement.classList.add('student');
    headers = [
      'Тема',
      'Дата',
      'Час',
      'Описание',
      'Име',
      'Фамилия',
      'ФН',
      'Дата на създаване',
    ];
  } else {
    headerElement.classList.add('teacher');
    headers = [
      'Тема',
      'Дата',
      'Час',
      'Описание',
      'Име',
      'Фамилия',
      'ФН',
      'Дата на създаване',
      'Автоматично генерирана',
    ];
  }

  headers.forEach(
    header => (headerElement.innerHTML += `<span>${header}</span>`)
  );

  invitations.forEach(invitation => {
    const invitationElement = document.createElement('div');
    invitationElement.id = 'invitations';

    const dataElement = document.createElement('div');

    let autoGenerated = invitation['auto_generated'];
    let image = invitation['image'];
    let creationDate = invitation['created_at'].split(' ')[0];

    delete invitation['auto_generated'];
    delete invitation['image'];
    delete invitation['created_at'];
    Object.assign(invitation, {
      created_at: creationDate,
    });

    Object.values(invitation).forEach(
      prop => (dataElement.innerHTML += `<span>${prop}</span>`)
    );

    invitationElement.classList.add('invitation-element');

    if (user.role === 'student') {
      dataElement.classList.add('student');
    } else {
      dataElement.classList.add('teacher');
      dataElement.innerHTML +=
        autoGenerated == 1
          ? '<span class="autogenerated">Да</span>'
          : '<span class="non-autogenerated">Не</span>';
    }
    invitationElement.appendChild(dataElement);

    const imgBox = document.createElement('div');

    if (image) {
      const img = new Image();
      img.src = `data:image/png;base64,${image}`;
      img.classList.add('img');

      imgBox.appendChild(img);
    } else {
      const noImg = document.createElement('span');
      noImg.innerHTML = 'Няма генерирано меме към тази покана';
      noImg.classList.add('no-img');

      imgBox.appendChild(noImg);
    }

    imgBox.classList.add(['img-box']);
    imgBox.classList.add(['hidden']);

    invitationElement.appendChild(imgBox);

    main.appendChild(invitationElement);
    invitationElement.addEventListener('click', () => {
      const imgBox = invitationElement.getElementsByTagName('div')[1];

      if (imgBox.classList.contains('hidden')) {
        imgBox.classList.remove('hidden');
      } else {
        imgBox.classList.add('hidden');
      }
    });
  });
}

async function getInvitations(term = '') {
  const data = {
    role: user.role,
    term,
  };

  const response = await fetch('../../backend/endpoints/get-invitations.php', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data),
  });

  const result = await response.json();
  return result;
}

document.getElementById('search-bar').addEventListener('change', () => {
  const term = document.getElementById('search-bar').value;

  getInvitations(term).then(response => {
    if (response.success) {
      const invitations = JSON.parse(response.data);
      addInvitationsToPage(invitations);
    }
  });
});
